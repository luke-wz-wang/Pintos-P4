		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Chaoqin Li <chaoqin@uchicago.edu>
Wenzong Wang <wenzongw@uchicago.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Added in struct thread in thread.h:
    struct list children;               /* the process's children */
    struct thread* parent;              /* the thread's parent */
/* use an array to store ptr to file, insert cost O(n), but find and delete cost O(1)*/
    struct file ** fd_array;
    int ret;                            /* exit status*/
    int count;                          /*record # of child*/
    struct file* myFile;                /*record file for file deny write*/

Added in thread.h:
  /*record chilren's exit value*/
  struct child_ret{
    tid_t tid;                          /*child tid*/
    int ret;                            /*child's exit value*/
    struct list_elem elem;              /*list elem*/
  };
Redifined:
static bool load (const char *cmdline, const char *realcmd, void (**eip) (void), void **esp);
static bool setup_stack (char* cmd_line, void **esp);

They are modified (added one argument) to pass the complete command line with all arguments to them to use in setup_stack.

 
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
1) created 2 variables arg[] and n; 
2) while parsing the command line, use n to keep records of the number of arguments and copy each parsed string into the user stack and keep its address in arg[];
3) word align the stack pointer;
4) push the saved pointers into stack in reverse order;
5) push the arg, n, and fake return address into the stack and free arg.
 
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
It is because strtok() keeps the last token internally and can be used in the next call. This can be dangerous when one process or thread might acquire the last token that is held by another and use it, where data race condition happens. Strtok_r() is re-entrant, which is safer.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
First, kernal does not heed to handle parsing now. 
Second, the shell will do error checking; therefore, passing bad arguments to kernal is restricted.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
static struct lock filesys_lock;
A process need to acquire a lock before using file system and release the lock when it is done.
struct file ** fd_array;
An array of pointer to file structure, the index of a pointer is the fid.
When a process open a file for the first time, initialize this array.
#define MAX_FID 135;
The maximum number of files that can be opened.
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
Initialize an array to store pointer to file structure, the index of a pointer is the fid.
When the file is closed, go to fd_array[i] and set the pointer to null.
When a file is opened, search array elements from 2 to 134,
set the first element with null pointer to be the pointer to the opened file. 
File descriptors are unique just within a single process.
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
We use get_user() and put_user() function to read/write data from the kernel.
Its return value helps us handle exception.
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
The wait system call further calls process wait where the parent process will wait for his own children to terminate and after the parent process is waked up it can retrive the exit status of his children by adding a list where children's exit status were stored. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
Make the error handling a separate function and check error as early as possible.
When I call palloc, always free the memory before the process exit.
That means freeing the memory before jumping to error handler.
Place the code that initialize the buffer and use the buffer in the 
I only put critical section inside the lock structure(usually 1 loc). 
In the critical section, no execution will cause the lock_release() to be skipped.
  
---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
A semophore cr_sm which is initialized to 0 i and the exit status of child process stored in the children list are used to handle this. Parent process is put into sleep after creating new threads. Newly created threads have reference pointer which points to its parent. If load is successful, its exit status will not be -1 and stored in the parent's children list. If load is not successful, it exits with -1 and parent will be waked up. Parent after waking up will have the information of its children's creation from children's list. If success, it will return the tid of new thread; otherwise, it returns -1.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
When P calls wait(C) before C exits, P is put to sleep and wait the exit of C. After C is awake, it will signal up. When p calls after C exits which minus down the count of child, it will not sleep as count is 0 which means it has no child. When P terminates without waiting before C exits, C will search its parent's children list which is empty now. C simply exits. When P terminates without waiting after C exits, as P does not use C, it simple freeing children list and exits.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
The put_user() and get_user() function makes use of MMU and is efficient. 
Also, it return a bool value to indicate failure or success, which
>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantage: Use an array to store pointer to file, and the index of element is fid.
So finding and deleting a corresponding file  cost O(1) time. 
Disadvantage: When a process open a file, no matter how many file it open, 
the size of fd_array is fixed, which waste some space, and limit the max number of files opened.
This problem can be solved by resizing array.
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We chose the default tid_t to pid_t mapping as it is simple.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Yes, implementing system call help me understand how OS interacts with user program.
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

