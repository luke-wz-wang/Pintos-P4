       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Chaoqin Li <chaoqin@uchicago.edu>
Wenzong Wang <wenzongw@uchicago.edu>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----
                         
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
//on disk inode.
struct inode_disk
  {
    //block_sector_t start;               /* First data sector. */
    enum inode_type type; 
    block_sector_t sectors[SECTOR_CNT]; /* Sectors. */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
  };
>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
123 direct index, 1 indirect index, 1 double indirect index
123 * 512 + 128 * 512 + 128  * 128 * 512 = 8MB
---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
A file is extended only when write_at is called. And write_at is protected by inode lock.
>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
When different processes read/write at the same time, they get the length of the file when the block is locked and the read/write operations are protected by lock. Race won't happen.
>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
We use condition variable to prevent starvation. Because when a process stop writing a block, our implementation will check whether there is a read waiter or write waiter.
---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
Yes. Because this structure can prevent internal fragmentation and allow inode to grow into really big size. Disadvantage is that we need to do many I/Os to fetch a doubly indirect block, which means bad performance. Because for large files, there are many doubly indirect blocks. 
			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Directory. Each directory is bond to a inode*/
struct dir 
  {
    struct inode *inode;                /* Backing store. */
    off_t pos;                          /* Current position. */
  };

/* Single directory entry. */
struct dir_entry 
  {
    block_sector_t inode_sector;        /* Sector number of header. */
    char name[NAME_MAX + 1];            /* Null terminated file name. */
    bool in_use;                        /* In use or free? */
  };


---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
First, identify whether the path is the root directory by checking the first character ('\'). If it is not the root, then start the traversing from the current working directory of the current thread. After that, through the iteration over the path string, parse the string based on '/' and search corresponding directory inode. Update the working directory if it is found. If it is not found, return false. Return the directory if the last part/token is 
reached.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
We rely on the filesys lock for such conditions. After one process removed or created a certain file and released the lock, the other process would not be able to find the file or find that the file has been created. 

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?
The implementation fo directory relies heavily on the the inode implementation. After verifying it is not empty nor being used, the directory will be removed and closed through inode_close(). And inode cannot be closed when some process still has it open.


---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.
A struct field named work_dir is used to represent the current directory of the process. Initially, the root directory is set to be the current directory. If a child process is started by the parent process, the child process inherits the parent's current working directory. After that, these two process's current work directory will not be interfered by the other.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct cache_block 
  {
    /* Locking to prevent eviction. */
    struct lock block_lock;                    /* Protects fields in group. */
    struct condition no_readers_or_writers; /* readers == 0 && writers == 0 */
    struct condition no_writers;                            /* writers == 0 */
    int readers, read_waiters;          /* # of readers, # waiting to read. */
    int writers, write_waiters; /* # of writers (<= 1), # waiting to write. */
    block_sector_t sector;
    bool up_to_date;
    bool dirty;
    struct lock data_lock;              /* Protects fields in group. */
    uint8_t data[BLOCK_SECTOR_SIZE];    /* Disk data. */
  };
//A cache block is in memory to avoid disk I/O.
struct cache_block cache[CACHE_CNT];
//All the cache blocks.
---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.
Use clock algorithm, evict the first block that has no reader, writer and waiter.
>> C3: Describe your implementation of write-behind.
When the file system is done or a block is evicted, flush the disk sector.
>> C4: Describe your implementation of read-ahead.
We don't implement read-ahead.
---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
Use condition variable and lock to prevent race condition. cache_lock(), cache_unlock()
>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
When we are evicting a block, we acquire block_lock so that other processes won't access the same block.
---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.
If a file workload repeatedly read some blocks repeatedly, then it can benefit from caching. 
For example, if a file load read blocks {A, A, B, C, D, A}
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Implementing multilevel indexing and file extension help me understand the trade off between performance and memory consumption.
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

